from pathlib import Path
from gtfparse import read_gtf
import numpy as np
import pandas as pd

configfile: 'config.yml'

# This code validates and processes the configuration and sets global variables:
include: 'steps/setup.smk'

# List short steps here so they will not be submitted as cluster jobs:
# (These can be specified on a per-file basis)
localrules:
    index_bed,
    extract_cdna,

# These are the target files to be generated (or regenerated if outdated).
# By default it includes all output files specified in the config file.
rule all:
    input:
        outputs,

## General functions used by multiple snakefiles

def fastq_inputs(wildcards) -> list:
    """Get the list of FASTQ file paths for a sample.
    
    Returns a list of paths. For paired-end samples, file pairs are adjacent
    in the list, e.g. [runA_1.fq.gz runA_2.fq.gz runB_1.fq.gz runB_2.fq.gz].
    For single-end samples, returns just the list of files.
    """
    paths, is_paired = fastq_map[wildcards.sample_id]
    if is_paired:
        result = []
        for i in range(len(paths[0])):
            result.append(paths[0][i])
            result.append(paths[1][i])
        return result
    else:
        return paths

def kallisto_single_end_flag(wildcards):
    """Get the kallisto single-end flag for a sample."""
    paths, is_paired = fastq_map[wildcards.sample_id]
    return '' if is_paired else f'--single --fragment-length {fragment_length_mean} --sd {fragment_length_sd}'

## Load rules from all the snakefiles

include: 'steps/align.smk'
for modality_group in modality_groups:
    include: f'steps/{modality_group}.smk'

## Additional general rules

rule index_bam:
    """Index a BAM file."""
    input:
        '{basename}.bam',
    output:
        '{basename}.bam.bai',
    params:
        add_threads = lambda w, threads: threads - 1,
    threads: 8
    shell:
        # It expects the number of *additional* threads to use beyond the first.
        'samtools index -@ {params.add_threads} {input}'

rule index_bed:
    """Index a BED file."""
    input:
        output_dir / '{pheno}.bed.gz',
    output:
        output_dir / '{pheno}.bed.gz.tbi'
    shell:
        'tabix {input}'

rule index_fasta:
    """Index a FASTA file, e.g. to get chromosome lengths from reference genome."""
    input:
        '{basename}.fa',
    output:
        '{basename}.fa.fai',
    shell:
        'samtools faidx {input}'

rule extract_cdna:
    """Extract cDNA sequences from a genome and GTF file.
    
    Empty transcript_id fields, which appear in gene entries in some GTFs,
    results in 'Error: no valid ID found for GFF record', so they are removed
    before running gffread.
    """
    input:
        ref_genome = ref_genome,
        ref_anno = ref_anno,
    output:
        ref_cdna,
    shell:
        """
        sed '/transcript_id "";/d' {input.ref_anno} \
            | gffread -g {input.ref_genome} -w - - \
            | bgzip -c \
            > {output}
        """
